{"name": "AWS IAM Backdoor Users Keys", "description": "Detects AWS API key creation for a user by another user. Backdoored users can be used to obtain persistence in the AWS environment. Also with this alert, you can detect a flow of AWS keys in your org.", "created": "2020-02-12T00:00:00.000Z", "valid_from": "2020-02-12T00:00:00Z", "indicator_types": ["malicious-activity"], "pattern_type": "sigma", "pattern": "title: AWS IAM Backdoor Users Keys\nid: 0a5177f4-6ca9-44c2-aacf-d3f3d8b6e4d2\nstatus: experimental\nauthor: faloker\ndate: 2020/02/12\ndescription: Detects AWS API key creation for a user by another user. Backdoored users can be used to obtain persistence in the AWS environment. Also with this alert, you can detect a flow of AWS keys in your org.\nreferences:\n    - https://github.com/RhinoSecurityLabs/pacu/blob/master/modules/iam__backdoor_users_keys/main.py#L6\nlogsource:\n    service: cloudtrail\ndetection:\n    selection_source:\n        - eventSource: iam.amazonaws.com\n    selection_eventname:\n        - eventName: CreateAccessKey\n    filter:\n        userIdentity.arn|contains: responseElements.accessKey.userName\n    condition: all of selection* and not filter\nfields:\n    - userIdentity.arn\n    - responseElements.accessKey.userName\n    - errorCode\n    - errorMessage\nlevel: medium\nfalsepositives:\n    - Adding user keys to their own accounts (the filter cannot cover all possible variants of user naming)\n    - AWS API keys legitimate exchange workflows\ntags:\n    - attack.t1098\n", "object_marking_refs": ["marking-definition--0a872d70-1d05-45dd-a25f-031af547a102"], "created_by_ref": "identity--082ca4f0-d825-45b6-aa42-ab9afd1e5503", "type": "indicator", "spec_version": "2.1", "id": "indicator--892f29d8-a47b-430e-b9e9-20bf245d4667", "modified": "2020-04-02T10:14:31.204Z"}